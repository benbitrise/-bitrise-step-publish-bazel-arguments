#
# A couple of useful guides & docs:
#
# - Main Bitrise CLI docs: https://github.com/bitrise-io/bitrise/tree/master/_docs
# - Step Development Guideline: https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
# - Bitrise.yml format spec: https://github.com/bitrise-io/bitrise/blob/master/_docs/bitrise-yml-format-spec.md
# - Bitrise docs: http://devcenter.bitrise.io/
# - Bitrise CLI guides: http://devcenter.bitrise.io/bitrise-cli/

title: |-
  Publish Bazel Arguments
summary: |
  Publishes Bazel build options as an annotation oto the Bitrise build log page.
description: |
  Given an invocation id, fetches from Bitrise's BES endpoint the invocation options on the Bazel build, then publishes that info to the build log page as an annotation for quick inspection.
website: https://github.com/benbitrise/bitrise-step-publish-bazel-arguments
source_code_url: https://github.com/benbitrise/bitrise-step-publish-bazel-arguments
support_url: https://github.com/benbitrise/bitrise-step-publish-bazel-arguments/issues

# If this step should be available only for certain project types
# just uncomment this `project_type_tags` section and include all the
# project types supported by the step. If the step can be used for all
# project types then you can just remove this section.
# If no `project_type_tags` specified (or specified as an empty array)
# that means the step can be used for any project type.
# You can find more information about project type tags in the Step Development Guideline:
# https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
#
# project_type_tags:
#   - ios
#   - macos
#   - android
#   - xamarin
#   - react-native
#   - cordova
#   - ionic
#   - flutter

# Type tags are used for categorizing steps, for easier step discovery in Step Libraries.
# You can find more information about type tags in the Step Development Guideline:
# https://github.com/bitrise-io/bitrise/blob/master/_docs/step-development-guideline.md
type_tags:
  - build

# These properties define whether a Step is run in a given Workflow or not.
# You can find more information about this in the documentation here:
# https://devcenter.bitrise.io/en/steps-and-workflows/developing-your-own-bitrise-step/developing-a-new-step.html#setting-conditions-for-running-the-step
#
# is_always_run: false
# is_skippable: false
# run_if: ""

# Use the `deps` property to declare dependencies that you can fetch from an OS dependency manager.
# You can find more information about this in the documentation here:
# https://devcenter.bitrise.io/en/steps-and-workflows/developing-your-own-bitrise-step/developing-a-new-step.html#submodules-and-step-dependencies
#
# deps:
#   brew:
#   - name: cmake
#   apt_get:
#   - name: cmake


toolkit:
  bash:
    entry_file: step.sh


inputs:
  - bitrise_access_token:
    opts:
      title: "Bitrise Access Token"
      summary: Bitrise PAT for interacting with REST API
      description: |
        Use an access token created using the [devcenter instructions](https://devcenter.bitrise.io/en/accounts/personal-access-tokens.html#creating-a-personal-access-token)
      is_expand: true
      is_required: true
      is_sensitive: true
  - invocation_id: $BITRISE_BUILD_SLUG
    opts:
      title: "Invocation ID"
      summary: The identifier within BES to lookup Bazel build information.
      description: |
        This will typically be the Bitrise Build Slug, but you can override it
      is_expand: true
      is_required: true

# outputs:
#   - EXAMPLE_STEP_OUTPUT:
#     opts:
#       title: "Example Step Output"
#       summary: Summary. No more than 2-3 sentences.
#       description: |
#         Description of this output.

#         Can be Markdown formatted text.
